name: Build and Test

on: [push, pull_request]

env:
  python_default: 3.12

jobs:
  build-dpdk:
    env:
      dependencies: gcc libbpf-dev libnuma-dev libpcap-dev ninja-build pkgconf
      CC: gcc
      DPDK_GIT: https://dpdk.org/git/dpdk-stable
      DPDK_VER: 23.11.1
    name: dpdk gcc
    outputs:
      dpdk_key: ${{ steps.gen_dpdk_key.outputs.key }}
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: update PATH
      run:  |
        echo "$HOME/bin"        >> $GITHUB_PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: create ci signature file for the dpdk cache key
      # This will collect most of DPDK related lines, so hash will be different
      # if something changed in a way we're building DPDK including DPDK_VER.
      # This also allows us to use cache from any branch as long as version
      # and a way we're building DPDK stays the same.
      run:  |
        cat .ci/dpdk-* > dpdk-ci-signature
        grep -rwE 'DPDK_GIT|DPDK_VER' .github/ >> dpdk-ci-signature
        if [ "${DPDK_VER##refs/*/}" != "${DPDK_VER}" ]; then
            git ls-remote --heads $DPDK_GIT $DPDK_VER >> dpdk-ci-signature
        fi
        cat dpdk-ci-signature

    - name: generate ci DPDK key
      id: gen_dpdk_key
      env:
        ci_key: ${{ hashFiles('dpdk-ci-signature') }}
      run:  echo 'key=dpdk-${{ env.ci_key }}' >> $GITHUB_OUTPUT

    - name: cache
      id: dpdk_cache
      uses: actions/cache@v4
      with:
        path: dpdk-dir
        key:  ${{ steps.gen_dpdk_key.outputs.key }}

    - name: set up python
      if: steps.dpdk_cache.outputs.cache-hit != 'true'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.python_default }}

    - name: update APT cache
      if: steps.dpdk_cache.outputs.cache-hit != 'true'
      run:  sudo apt update || true
    - name: install common dependencies
      if: steps.dpdk_cache.outputs.cache-hit != 'true'
      run:  sudo apt install -y ${{ env.dependencies }}

    - name: prepare
      if: steps.dpdk_cache.outputs.cache-hit != 'true'
      run:  ./.ci/dpdk-prepare.sh

    - name: build
      if: steps.dpdk_cache.outputs.cache-hit != 'true'
      run:  ./.ci/dpdk-build.sh

  build-clang-analyze:
    needs: build-dpdk
    env:
      dependencies: |
        automake bc clang-tools libbpf-dev libnuma-dev libpcap-dev \
        libunbound-dev libunwind-dev libssl-dev libtool llvm-dev
      CC:   clang
      DPDK: dpdk
      CLANG_ANALYZE: true
    name: clang-analyze
    runs-on: ubuntu-22.04
    timeout-minutes: 30

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: get base branch sha
      id: base_branch
      env:
        BASE_SHA: ${{ github.event.pull_request.base.sha }}
        EVENT_BEFORE: ${{ github.event.before }}
        FORCED_PUSH: ${{ github.event.forced }}
      run: |
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
          echo "sha=$BASE_SHA" >> $GITHUB_OUTPUT
        else
          if [ "$EVENT_BEFORE" = "0000000000000000000000000000000000000000" ] \
             || [ "$FORCED_PUSH" = true ]; then
            BASE_SHA=HEAD~1
            MIN_DISTANCE=1000
            git remote add upstream https://github.com/openvswitch/ovs.git
            git fetch upstream
            for upstream_head in $(git ls-remote --heads upstream main dpdk-latest branch-2.17 branch-[3456789]* | cut -f 1); do
              CURR_BASE=$(git merge-base ${upstream_head} HEAD 2>/dev/null)
              if [ ${CURR_BASE} ]; then
                DISTANCE=$(git log --oneline ${CURR_BASE}..HEAD | wc -l);
                if test ${MIN_DISTANCE} -gt ${DISTANCE}; then
                  BASE_SHA=${CURR_BASE}
                  MIN_DISTANCE=${DISTANCE}
                fi
              fi
            done
            echo "sha=$BASE_SHA" >> $GITHUB_OUTPUT
          else
            echo "sha=$EVENT_BEFORE" >> $GITHUB_OUTPUT
          fi
        fi

    - name: checkout base branch
      env:
        BASE_SHA: ${{ steps.base_branch.outputs.sha }}
      run: |
        cp -r $(pwd)/. /tmp/base_ovs_main && mv /tmp/base_ovs_main ./
        cd $(pwd)/base_ovs_main
        git checkout ${BASE_SHA}

    - name: update PATH
      run: |
        echo "$HOME/bin"        >> $GITHUB_PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: generate cache key
      id: cache_key
      run: |
        ver=$(${CC} -v 2>&1 | grep ' version ' | \
              sed 's/.*version \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/g')
        echo "key=${CC}-${ver}-analyze-$(git -C base_ovs_main rev-parse HEAD)" \
          >> $GITHUB_OUTPUT

    - name: check for analyzer result cache
      id: clang_cache
      uses: actions/cache@v4
      with:
        path: base-clang-analyzer-results
        key:  ${{ steps.cache_key.outputs.key }}

    - name: set up python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.python_default }}

    - name: get cached dpdk-dir
      uses: actions/cache/restore@v4
      with:
        path: dpdk-dir
        key:  ${{ needs.build-dpdk.outputs.dpdk_key }}

    - name: update APT cache
      run:  sudo apt update || true

    - name: install common dependencies
      run:  sudo apt install -y ${{ env.dependencies }}

    - name: prepare
      run:  ./.ci/linux-prepare.sh

    - name: build base reference
      if: steps.clang_cache.outputs.cache-hit != 'true'
      run:  ./.ci/linux-build.sh

    - name: save cache
      uses: actions/cache/save@v4
      if: steps.clang_cache.outputs.cache-hit != 'true'
      with:
        path: base-clang-analyzer-results
        key:  ${{ steps.cache_key.outputs.key }}

    - name: build
      run:  ./.ci/linux-build.sh

    - name: upload sarif files
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: sarif-files
        path: |
          base-clang-analyzer-results
          clang-analyzer-results
